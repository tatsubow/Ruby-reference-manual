#インスタンスメソッド

self % args -> String
#printfと同じ規則に従ってargsをフォーマットする
#args: フォーマットする値、もしくはその配列
p "i = %d" % 10# => "i=10"
p "i = %x" % 10# => "i=a"
p "i = %o" % 10# => "i=12"

p "i = %#d" % 10# => "i=10"
p "i = %#x" % 10# => "i=0xa"
p "i = %#o" % 10# => "i=012"

p "%d" % 10# => "10"
p "%d, %o" % [10, 10]# => "10, 12"

#sprintf フォーマット
#Rubyのsprintfフォーマットは基本的にC言語のsprintfと同じ。整数の大きさに上限はなく、負の数を与えると、..fのような表示をする。（%+x, %xのように指定して、絶対値に符号をつけた形で出力させる)
%[nth$][フラグ][幅][.精度]指示子
%[<name>][フラグ][幅][.精度]指示子

#フラグ: #,+,スペース,-,0の5種類がある
#"#"について、2,8,16進数の指示子にはそれぞれプレフィックスとして"0b","0B"などを付加する。
p sprintf("%#b", 10)# => "0b1010"
p sprintf("%#B", 10)# => "0B1010"
p sprintf("%#b", 0)# => "0"
p sprintf("%#o", 10)# => "012"
p sprintf("%#x", 10)# => "0xa"
p sprintf("%#X", 10)# => "0XA"

#浮動小数点数の場合は必ず出力に"."をつける。
p sprintf("%.0f", 10)# => "10"
p sprintf("%#.0f", 10)# => "10."
p sprintf("%.0e", 10)# => "1e+01"
p sprintf("%#.0e", 10)# => "1.e+01"

#g,Gでは上記に加えて末尾の余分な0が残る
p sprintf("%.05g", 10)# => "10"
p sprintf("%#.05g", 10)# => "10.000"

#"+"について、出力文字列を符号付きにする。
p sprintf("%d", 1)# => "1"
p sprintf("%+d", 1)# => "+1"
p sprintf("%x", -1)# => "..f" (fが無限に続くことを意味している)
p sprintf("%+x", -1)# => "-1"

#"スペース"について、"+"と同じだが、正の符号の代わりに空白を使う。
p sprintf("%d", 1)# => "1"
p sprintf("%+d", 1)# => "+1"
p sprintf("% d", 1)# => " 1"
p sprintf("%x", -1)# => "..f"
p sprintf("% x", 1)# => " 1"
p sprintf("% x", -1)# => "-1"

#"-"について、出力を左詰めにする。幅の指定がないと意味がない。

#"0"について、出力が右詰めの場合に余った部分に空白の代わりに0を詰める。
p sprintf("%010d", 10)# => "0000000010"
p sprintf("%#010x", 10)# => "0x0000000a"
p sprintf("%#010o", 10)# => "0000000012"
p sprintf("%#010b", 10)# => "0b00001010"
p sprintf("%#10.8x", 10)# => "0x0000000a"
p sprintf("%#10.9o", 10)# => "0000000012"
p sprintf("%#10.8b", 10)# => "0b00001010"
p sprintf("%#10x", 10)# => "       0xa"
p sprintf("%#10o", 10)# => "       012"
p self("%#10b", 10)# => "    0b1010"

#幅: 0以外の数字で始まる数字列は幅指定になる。幅は生成文字列の長さを示し、精度の値によらずこの幅分だけの文字列が生成される。
p sprintf("%+5d", 11)# => "  +11"
p sprintf("%+-5d", 11)# => "+11  "
p sprintf("%+05d", 11)# => "+0011"
#指定した幅を超える場合は幅の指定は無効となり、幅として*を指定すると幅の値を引数から得ることになる。
p sprintf("%#05x", 10)# => "0x00a"
p sprintf("%#0*x", 5, 10)# => "0x00a"

#精度: "."の後に続く数字列は精度を表す。精度は整数の指示子に対しては、数値列部分の長さを意味する。
p sprintf("%10.5d", 1)# => "     00001"
p sprintf("%#10.5x", 1)# => "   0x00001"
p sprintf("%+10.5x", 1)# => "     00001"
p sprintf("%10.5f", 1)# => "   1.00000"
p sprintf("%10.5f", 10)# => "  10.00000"
p sprintf("%10.5e", 1)# => "1.00000e+00"
p sprintf("%10.5e", 10)# => "1.00000e+01"
p sprintf("%10.5g", 10)# => "        10"
p sprintf("%#10.5G", 10)# => "    10.000"
p sprintf("%10.2s", "foo")# => "        fo"
p sprintf("%5.5s", "foo")# => "  foo"
p sprintf("%5.5s", "foobar")# => "fooba"
p sprintf("%.5s", "foobar")# => "fooba"
p sprintf("%.*s", 5, "foobar")# => "fooba"

#指示子: 引数の型の解釈を示す。省略することはできない。
#文字列を表す指示子: c, s, p
#整数を表す指示子: d, i, u, b, B, o, x, X
#浮動小数点数を表す指示子: f, g, e, E, G

#"c"について、引数の数値0-255を文字コードとみなして対応する文字を出力する。フラグと幅の指定だけが意味を持つ。to_intメソッド
p sprintf("%c", 97)# => "a"
p sprintf("%c", 'a')# => "a"

#"s"について、文字列を出力する。to_sメソッド

#"p"について、Object#inspectの結果を出力します。
p sprintf("%s", /e+/)# => "(?-mix:e+)"
p sprintf("%p", /e+/)# => "/e+/"

#"d, i"について、引数の数値を10進表現の整数として出力する。
p sprintf("%d", -1)# => "-1"
p sprintf("%d", 3.1)# => "3"
p sprintf("%d", '0b1010')# => "10"

#"u"について、引数の数値を符号なし整数とみなして10進表現の整数として出力する。
p sprintf("%u", '0b1010')# => "10"
p sprintf("%u", -1)# => "-1"

#"b, B, o, x, X"について、整数をそれぞれ2進、2進(大文字)、8進、16進、16進(大文字)表現の文字列で出力する。
p sprintf("%#b", 10)# => "0b1010"
p sprintf("%#B", 10)# => "0B1010"
p sprintf("%#o", 10)# => "012"
p sprintf("%#x", 10)# => "0xa"
p sprintf("%#X", 10)# => "0XA"

#負の数に対しては".."が付加される。
p sprintf("%#b", -1)# => "0b..1"
p sprintf("%#o", -1)# => "0..7"
p sprintf("%#x", -1)# => "0x..f"
p sprintf("%10x", -1)# => "       ..f"
p sprintf("%-10x", -1)# => "..f       "
p sprintf("%.10x", -1)# => "..ffffffff"

#"f, e, E, g, G, a, A"について、
#"f"は小数点表現で数値を出力する
#"e"は指数表現で数値を出力する
#"g"は指数が-4より小さいか精度以上の場合にeと同じ出力を、それ以外では"f"と同じ出力を行う。ただし、小数部の末尾のは取り除かれる。
#"a, A"は指数表現の16進数で数値を出力する。
p sprintf("%a", -0.0)# => "-0x0p+0"
p sprintf("%a", 729.0/10)# => "0x1.239999999999ap+6"
p sprintf("%a", Float::INFINITY)# => "Inf"

p sprintf("%f", 1.0)# => "1.000000"
p sprintf("%e", 1.0)# => "1.000000e+00"
p sprintf("%g", 1.0)# => "1"
p sprintf("%f", 10.1)# => "10.100000"
p sprintf("%e", 10.1)# => "1.010000e+01"
p sprintf("%g", 10.1)# => "10.1"
p sprintf("%g", 10 ** 6)# => "1e+06"
p sprintf("%g", 10 ** -5)# => "1e-05"

#無限大に対する出力
p sprintf("%f", 1.0/0)# => "inf"
p sprintf("%f", -1.0/0)# => "-inf"
p sprintf("%f", 0.0/0)# => "nan"
p sprintf("%E", 1.0/0)# => "INF"
p sprintf("%E", -1.0/0)# => "-INF"
p sprintf("%E", 0.0/0)# => "NAN"

#引数指定:
#nath$: nth番目の引数のフォーマットを行うことを示す。
